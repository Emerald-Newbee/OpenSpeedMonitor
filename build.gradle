/*
* OpenSpeedMonitor (OSM)
* Copyright 2014 iteratec GmbH
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.grails.plugins:database-migration:3.0.3'
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.13.1"
        classpath 'com.bertramlabs.plugins:less-asset-pipeline:2.13.1'
        classpath "org.grails.plugins:hibernate5:6.1.9"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.0.1'
    }
}

version "4.5.2"
group "OpenSpeedMonitor"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"
apply plugin: 'com.moowork.node'

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion

    karmaExec = file('node_modules/karma/bin/karma')
    karmaConfig = 'src/test/js/karma.conf.js'

    seleniumVersion = "2.53.1"
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://dl.bintray.com/ishults/plugins" }
    maven { url "https://dl.bintray.com/longwa/plugins" }
    maven { url "https://dl.bintray.com/ajay-kumar/plugins" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    // Default Grails-Stuff
    runtime 'org.grails.plugins:grails-console:2.0.8'
    compile "org.grails:grails-core"
    compile 'org.grails:grails-logging'
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5:6.1.9"
    compile 'org.grails.plugins:log-hibernate-stats:1.0.20'
    compile "org.hibernate:hibernate-ehcache"
    compile 'org.grails.plugins:swagger:1.0.0'
    compile 'io.swagger:swagger-core:1.5.20'

    runtime "com.h2database:h2"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    console "org.grails:grails-console"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    profile "org.grails.profiles:web:3.2.0"

    testCompile "org.grails:grails-gorm-testing-support:1.1.4"
    testCompile "org.grails:grails-web-testing-support:1.1.4"
    testCompile "org.grails.plugins:hibernate5:6.1.9"
    testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"

    //Custom OSM-Stuff
    runtime 'mysql:mysql-connector-java:5.1.26'
    compile 'com.bertramlabs.plugins:less-asset-pipeline:2.13.1'
    runtime 'org.grails.plugins:database-migration:3.0.3'
    compile 'net.sf.supercsv:super-csv:2.4.0'
    compile 'org.grails.plugins:joda-time:2.0.0'
    compile 'org.grails.plugins:spring-security-core:3.2.1'
    compile 'org.grails.plugins:spring-security-ui:3.1.2'
    compile 'org.grails.plugins:greenmail:2.0.0.M1'
    compile 'org.grails.plugins:mail:2.0.0.RC6'
    compile 'org.grails.plugins:quartz:2.0.8'
    compile 'org.grails.plugins:taggable:2.1.0-SNAPSHOT'
    compile 'org.grails.plugins:cookie:2.0.4'
    compile 'xml-apis:xml-apis:1.4.01'
    compile 'io.dropwizard.metrics:metrics-core:3.2.3'
    compile 'io.dropwizard.metrics:metrics-graphite:3.2.3'
    compile 'io.dropwizard.metrics:metrics-jvm:3.2.3'
    compile 'p6spy:p6spy:3.0.0'
    compile 'org.grails.plugins:build-test-data:3.3.0.RC2'
    compile 'io.github.http-builder-ng:http-builder-ng-core:0.17.0'
    compile 'org.grails.plugins:http-builder-helper:1.0.2'

    runtime 'net.sf.supercsv:super-csv:2.4.0'
    assets 'com.bertramlabs.plugins:less-asset-pipeline:2.13.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'software.betamax:betamax-junit:2.0.0-alpha-1'
    testCompile('com.athaydes:spock-reports:1.3.0'){
        transitive = false // this avoids affecting your version of Groovy/Spock
    }

}
task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

assets {
    minifyJs = true
    minifyCss = true
    configOptions = [:]
    excludes = ['node_modules/**/*.less']
}

node {
    //node version to use
    version = '8.11.1'
    //npm version to use
    npmVersion = '5.6.0'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory where node_modules should be located
//    nodeModulesDir = file("${project.projectDir}/node_modules")
    nodeModulesDir = file("${project.projectDir}")
}

npmInstall {
    outputs.files file('node_modules')
}

bootRun {
    jvmArgs = [
            "-Dlogging.config=${project.projectDir}/grails-app/conf/logback.groovy"
    ]
}

task jasmineRun(type: NodeTask, dependsOn: ['nodePackages']) {
    script = karmaExec
    args = ['start', karmaConfig, '--single-run']
}

task jasmineWatch(type: NodeTask, dependsOn: 'npmInstall') {
    script = karmaExec
    args = ['start', karmaConfig]
}

test.dependsOn jasmineRun

task nodeSyncJavascript(type: Sync) {
    from 'node_modules'
    into "grails-app/assets/javascripts/node_modules"
    include 'jquery/dist/jquery.min.js'
    include 'jquery-ui-dist/jquery-ui.min.js'
    include 'bootstrap/dist/js/bootstrap.min.js'
    include 'clipboard/dist/clipboard.min.js'
    include 'jquery-contextmenu/dist/jquery.contextMenu.min.js'
    include 'chosen-js/chosen.jquery.js'
    include 'd3/d3.min.js'
    include 'later/later.min.js'
    include 'moment/min/moment.min.js'
    include 'prettycron/prettycron.js'
    include 'spin/dist/spin.min.js'
    include 'tagit/js/tag-it.min.js'
    include 'codemirror/lib/codemirror.js'
    include 'codemirror/addon/hint/show-hint.js'
    include 'bootstrap-timepicker/js/bootstrap-timepicker.js'
    include 'sticky-table-headers/js/jquery.stickytableheaders.js'
    include 'file-saver/FileSaver.min.js'
    include 'bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min.js'
    include 'save-svg-as-png/saveSvgAsPng.js'
    include "air-datepicker/dist/js/datepicker.min.js"
    include "air-datepicker/dist/js/i18n/datepicker.en.js"
    include "air-datepicker/dist/js/i18n/datepicker.de.js"
    include "bootstrap-validator/js/validator.js"
    include "vue/dist/vue.js"
    include "vue/dist/vue.min.js"
    dependsOn npmInstall
}

task nodeSyncStylesheets(type: Sync) {
    from 'node_modules'
    into "grails-app/assets/stylesheets/node_modules"
    include 'bootstrap/dist/css/bootstrap*.min.css'
    include 'bootstrap/less/*.less'
    include 'bootstrap/less/mixins/*.less'
    include 'components-font-awesome/css/font-awesome.min.css'
    include 'components-font-awesome/fonts/*'
    include 'jquery-contextmenu/dist/jquery.contextMenu.min.css'
    include 'bootstrap-chosen/bootstrap-chosen.less'
    include 'bootstrap-chosen/bootstrap-chosen-variables.less'
    include 'bootstrap-chosen/chosen-sprite.png'
    include 'bootstrap-chosen/chosen-sprite@2x.png'
    include 'codemirror/lib/codemirror.css'
    include 'codemirror/addon/hint/show-hint.css'
    include 'tagit/css/jquery.tagit.css'
    include 'jquery-ui-dist/jquery-ui.css'
    include 'jquery-ui-dist/images/'
    include 'bootstrap-colorpicker/dist/css/bootstrap-colorpicker.min.css'
    include 'bootstrap-colorpicker/dist/img/bootstrap-colorpicker/*'
    include 'air-datepicker/dist/css/datepicker.min.css'
    dependsOn npmInstall
}


task nodePackages() {
    dependsOn nodeSyncJavascript, nodeSyncStylesheets
}

processResources.dependsOn nodePackages
assetCompile.dependsOn nodePackages

clean.delete << file('grails-app/assets/javascripts/node_modules')
clean.delete << file('grails-app/assets/stylesheets/node_modules')
clean.delete << file('node_modules')



sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}
'dbmGormDiff' {
    jvmArgs = ["-XX:MaxPermSize=512m", "-Xms1G", "-Xmx2G"]
}

'dbmUpdate' {
    jvmArgs = ["-XX:MaxPermSize=512m", "-Xms1G", "-Xmx2G"]
}
'dbmClearChecksums' {
    jvmArgs = ["-XX:MaxPermSize=512m", "-Xms1G", "-Xmx2G"]
}
'dbmChangelogSync' {
    jvmArgs = ["-XX:MaxPermSize=512m", "-Xms1G", "-Xmx2G"]
}

integrationTest {
    if (System.getProperty('webdriver.chrome.driver')){
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
    }
    if (System.getProperty('grails.env')){
        systemProperty 'grails.env', 'test'
    }
    if (System.getProperty('geb.env')){
        systemProperty 'geb.env', 'chrome'
    }
}

